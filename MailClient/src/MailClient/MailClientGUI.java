package MailClient;

import Database.*;
import MailPackage.*;
import com.mysql.jdbc.exceptions.jdbc4.CommunicationsException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.NO_OPTION;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;

/**
 * This class is the primary mail client GUI for controlling all messaging
 *
 * @author Bryce, Steven, Hunter, Tristan
 */
public class MailClientGUI extends javax.swing.JFrame {

  /**
   * Creates new form MailClientGUI
   */
  public MailClientGUI() {
    //Set window title
    super("BCHT Mail (" + QuerySubmitter.getInstance().getUser() + ")");
    initComponents();
    query = QuerySubmitter.getInstance();
    //Get inbox table
    try {
      messageTable.setModel(query.getInbox().getModel());
      formatInbox();
    } catch (SQLException ex) {
      Logger.getLogger(MailClientGUI.class.getName()).
              log(Level.SEVERE, null, ex);
    }
    //Enable admin menu item if user is admin
    try {
      if (!query.isAdmin(query.getUser())) {
        adminMenuItem.setEnabled(false);
      } else {
      }
    } catch (SQLException ex) {
      Logger.getLogger(MailClientGUI.class.getName()).
              log(Level.SEVERE, null, ex);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTable = new javax.swing.JTable();
        newMessageButton = new javax.swing.JButton();
        replyMessageButton = new javax.swing.JButton();
        deleteMessageButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mailboxSelectionList = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        accountMenu = new javax.swing.JMenu();
        secQstMenuItem = new javax.swing.JMenuItem();
        resetPwdMenuItem = new javax.swing.JMenuItem();
        logoutMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        adminMenu = new javax.swing.JMenu();
        adminMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        MainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MainPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        messageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Title", "Author", "Timestamp"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    messageTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            messageTableMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(messageTable);

    newMessageButton.setText("New");
    newMessageButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newMessageButtonActionPerformed(evt);
        }
    });

    replyMessageButton.setText("Reply");
    replyMessageButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            replyMessageButtonActionPerformed(evt);
        }
    });

    deleteMessageButton.setText("Delete");
    deleteMessageButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteMessageButtonActionPerformed(evt);
        }
    });

    mailboxSelectionList.setModel(new javax.swing.AbstractListModel<String>() {
        String[] strings = { "Inbox", "Outbox", "Contacts" };
        public int getSize() { return strings.length; }
        public String getElementAt(int i) { return strings[i]; }
    });
    mailboxSelectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    mailboxSelectionList.setSelectedIndex(0);
    mailboxSelectionList.setVisibleRowCount(3);
    mailboxSelectionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            mailboxSelectionListValueChanged(evt);
        }
    });
    jScrollPane2.setViewportView(mailboxSelectionList);

    javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
    MainPanel.setLayout(MainPanelLayout);
    MainPanelLayout.setHorizontalGroup(
        MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(MainPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MainPanelLayout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(newMessageButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(replyMessageButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(deleteMessageButton))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(28, Short.MAX_VALUE))
    );
    MainPanelLayout.setVerticalGroup(
        MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(MainPanelLayout.createSequentialGroup()
            .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(replyMessageButton)
                .addComponent(deleteMessageButton)
                .addComponent(newMessageButton))
            .addGap(8, 8, 8)
            .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(49, Short.MAX_VALUE))
    );

    accountMenu.setText("Account");

    secQstMenuItem.setText("Set Security Question");
    secQstMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            secQstMenuItemActionPerformed(evt);
        }
    });
    accountMenu.add(secQstMenuItem);

    resetPwdMenuItem.setText("Reset Password");
    resetPwdMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetPwdMenuItemActionPerformed(evt);
        }
    });
    accountMenu.add(resetPwdMenuItem);

    logoutMenuItem.setText("Logout");
    logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            logoutMenuItemActionPerformed(evt);
        }
    });
    accountMenu.add(logoutMenuItem);

    deleteMenuItem.setForeground(new java.awt.Color(255, 0, 0));
    deleteMenuItem.setText("Delete Account");
    deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteMenuItemActionPerformed(evt);
        }
    });
    accountMenu.add(deleteMenuItem);

    jMenuBar1.add(accountMenu);

    adminMenu.setText("Administrator");

    adminMenuItem.setText("Database Settings");
    adminMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            adminMenuItemActionPerformed(evt);
        }
    });
    adminMenu.add(adminMenuItem);

    jMenuBar1.add(adminMenu);

    jMenu1.setText("Help");

    aboutMenuItem.setText("About");
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            aboutMenuItemActionPerformed(evt);
        }
    });
    jMenu1.add(aboutMenuItem);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

  //Handler to create a new message
    private void newMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMessageButtonActionPerformed
      sndMsgGui = new SndMessageGUI();
      sndMsgGui.setVisible(true);
    }//GEN-LAST:event_newMessageButtonActionPerformed

  //Handler when one of the items from the mailbox list is selected
    private void mailboxSelectionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_mailboxSelectionListValueChanged
      updateMailbox();
    }//GEN-LAST:event_mailboxSelectionListValueChanged

  //Handler for when a row is selected from the messageTable
    private void messageTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageTableMouseClicked
      String selection = mailboxSelectionList.getSelectedValue();
      if (evt.getClickCount() == 2 && !"Contacts".equals(selection)) {
        //Get the id value from the table
        int id = (int) messageTable.getModel().getValueAt(messageTable.
                getSelectedRow(), 0);
        try {
          // Get the message based on the id and list
          Message msg = query.getMessage(id, selection);
          query.markRead(id);
          switch (selection) {
            case "Inbox":
              //Create new RcvMessageGUI if double click in inbox
              rcvMsgGui = new RcvMessageGUI(msg, this, selection);
              rcvMsgGui.setVisible(true);
              break;
            case "Outbox":
              //Create new SndMessageGUI if double click in outbox
              sndMsgGui = new SndMessageGUI(msg, false);
              sndMsgGui.setViewOnlyMode();
              sndMsgGui.setVisible(true);
              break;
            case "Contacts":
              //Do nothing in contacts case
              break;
          }

        } catch (SQLException ex) {
          Logger.getLogger(MailClientGUI.class.getName()).
                  log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_messageTableMouseClicked

  //Handler for clicking the reset password menu item
    private void resetPwdMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPwdMenuItemActionPerformed
      try {
        String password = "";
        try {
          //Prompt for current password
          password = JOptionPane.showInputDialog(this,
                  "Enter your current password:");
        } catch (NullPointerException npe) {
          password = "";
        }
        if (query.verifyPassword(query.getUser(), password)) {
          //Get new password
          String pwd = JOptionPane.showInputDialog(this, "Enter your new password:");
          try {
            if (pwd == null) {
              pwd = "";
            }
          } catch (NullPointerException ne) {
            pwd = "";
          }
          if (!pwd.equals("")) {
            //Reset to new password
            query.resetUserPassword(pwd);
          } else {
            JOptionPane.showMessageDialog(this, "Update Password cancelled.");
          }
        } else {
          JOptionPane.
                  showMessageDialog(this, "Your answer was incorrect.");
        }
      } catch (SQLException ex) {
        Logger.getLogger(MailClientGUI.class.getName()).
                log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_resetPwdMenuItemActionPerformed

  //Handler to launch AdminGUi
    private void adminMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminMenuItemActionPerformed
      adminGui = new AdminGUI(this);
      adminGui.setVisible(true);
    }//GEN-LAST:event_adminMenuItemActionPerformed

  //Handler to set security question
    private void secQstMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secQstMenuItemActionPerformed
      //Ask for security question
      String question = JOptionPane.showInputDialog(this, "Enter your security question:");
      String answer = "";
      try {
        if (question == null) {
          question = "";
        }
      } catch (NullPointerException ne) {
        question = "";
      }

      if (!question.equals("")) {
        //Prompt for sec question answer
        answer = JOptionPane.showInputDialog(this, "Enter your security answer:");
        try {
          if (answer == null) {
            answer = "";
          }
        } catch (NullPointerException ne) {
          answer = "";
        }
        if (!answer.equals("")) {
          try {
            //Set security question and answer
            query.setSecQuestion(question, answer);
          } catch (SQLException ex) {
            Logger.getLogger(MailClientGUI.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
      }


    }//GEN-LAST:event_secQstMenuItemActionPerformed

  //Handler for logging out of mail client
    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
      LoginGUI login = new LoginGUI();
      login.setVisible(true);
      dispose();
    }//GEN-LAST:event_logoutMenuItemActionPerformed

  //Handler to retrieve information about application
  private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
    String about
            = "BCHT Mail\n\nCS 321\nSpring 2017\nGroup 1 Semester Project\n\nGroup Members:\nBryce Johnston\nChristopher McClurg\nHunter Cowing\nTristan Cone";
    JOptionPane.showMessageDialog(null, about, "About BCHT Mail",
            JOptionPane.PLAIN_MESSAGE);
  }//GEN-LAST:event_aboutMenuItemActionPerformed

  //Handler to delete the account
    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
      int choice = JOptionPane.showConfirmDialog(this,
              "Do you really want to delete?", "Confirmation", YES_NO_OPTION);
      if (choice == 0) {
        try {
          query.deleteAccount();
        } catch (SQLException ex) {
          Logger.getLogger(MailClientGUI.class.getName()).
                  log(Level.SEVERE, null, ex);
        }
        LoginGUI login = new LoginGUI();
        login.setVisible(true);
        dispose();
      } else {
        JOptionPane.showMessageDialog(this, "This user was not deleted.");
      }
    }//GEN-LAST:event_deleteMenuItemActionPerformed

  //Handler to reply to a message in the inbox
    private void replyMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replyMessageButtonActionPerformed
      //Get the message id and list selection
      int id = (int) messageTable.getModel().getValueAt(messageTable.
              getSelectedRow(), 0);
      String selection = mailboxSelectionList.getSelectedValue();
      //Check if it's a valid selection to reply to
      if (id != -1 && !"Contacts".equals(selection)) {
        try {
          //Get the message and create a new SndMessageGUI
          Message msg = query.getMessage(id, selection);
          query.markRead(id);
          sndMsgGui = new SndMessageGUI(msg, true);
          sndMsgGui.setVisible(true);
        } catch (SQLException ex) {
          Logger.getLogger(MailClientGUI.class.getName()).
                  log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_replyMessageButtonActionPerformed

  //Hanlder to delete a message from inbox or outbox
    private void deleteMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMessageButtonActionPerformed
      //Get the message id and list selection
      int id = (int) messageTable.getModel().getValueAt(messageTable.
              getSelectedRow(), 0);
      String selection = mailboxSelectionList.getSelectedValue();
      //If selection is valid delete the message and refresh the mailbox
      if (id != -1 && !"Contacts".equals(selection)) {
        try {
          query.deleteMessage(id, selection);
          updateMailbox();
        } catch (SQLException ex) {
          Logger.getLogger(MailClientGUI.class.getName()).
                  log(Level.SEVERE, null, ex);
        }
      }
    }//GEN-LAST:event_deleteMessageButtonActionPerformed

  //Handler to close all launched windows from mail client when window is closed
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
      if (rcvMsgGui != null) {
        rcvMsgGui.dispose();
      }
      if (sndMsgGui != null) {
        sndMsgGui.dispose();
      }
      if (adminGui != null) {
        adminGui.dispose();
      }
    }//GEN-LAST:event_formWindowClosed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info
              : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(MailClientGUI.class.getName()).
              log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(MailClientGUI.class.getName()).
              log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(MailClientGUI.class.getName()).
              log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(MailClientGUI.class.getName()).
              log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new MailClientGUI().setVisible(true);
      }
    });
  }

  //Function to start thread in backgroun for updating mailbox
  public void startPolling() {
    mPoller = new Poller(this, POLL_TIME);
    mPoller.start();
  }

  /**
   * Function to update mailbox
   */
  public void updateMailbox() {
    //Get the selected value from the list
    String selection = mailboxSelectionList.getSelectedValue();
    switch (selection) {
      case "Inbox":
        //In inbox case enable all buttons and get inbox
        replyMessageButton.setEnabled(true);
        deleteMessageButton.setEnabled(true);
        try {
          messageTable.setModel(query.getInbox().getModel());
          formatInbox();
        } catch (CommunicationsException ce) {
          int option = JOptionPane.showConfirmDialog(this, "Something is wrong with your internet connection. Try to reconnect?", "Connection Error", YES_NO_OPTION);
          if (option == YES_OPTION) {
            reconnect();
          }
          else if (option == NO_OPTION) {
            System.exit(1);
          }
        } catch (SQLException ex) {
          Logger.getLogger(MailClientGUI.class.getName()).
                  log(Level.SEVERE, null, ex);
        }
        break;
      case "Outbox":
        //In outbox case disable the reply button and get outbox
        replyMessageButton.setEnabled(false);
        deleteMessageButton.setEnabled(true);
        try {
          messageTable.setModel(query.getOutbox().getModel());
          formatOutbox();
        } catch (CommunicationsException ce) {
          int option = JOptionPane.showConfirmDialog(this, "Something is wrong with your internet connection. Try to reconnect?", "Connection Error", YES_NO_OPTION);
          if (option == YES_OPTION) {
            reconnect();
          }
          else if (option == NO_OPTION) {
            System.exit(1);
          }
        } catch (SQLException ex) {
          Logger.getLogger(MailClientGUI.class.getName()).
                  log(Level.SEVERE, null, ex);
        }
        break;
      case "Contacts":
        //In contact case disable reply and delete, and get contacts
        replyMessageButton.setEnabled(false);
        deleteMessageButton.setEnabled(false);
        try {
          messageTable.setModel(query.getContacts().getModel());
        } catch (CommunicationsException ce) {
          int option = JOptionPane.showConfirmDialog(this, "Something is wrong with your internet connection. Try to reconnect?", "Connection Error", YES_NO_OPTION);
          if (option == YES_OPTION) {
            reconnect();
          }
          else if (option == NO_OPTION) {
            System.exit(1);
          }

        } catch (SQLException ex) {
          Logger.getLogger(MailClientGUI.class.getName()).
                  log(Level.SEVERE, null, ex);
        }
        break;
    }
  }

  //Function to hide extraneous information in inbox from user
  private void formatInbox() {
    messageTable.removeColumn(messageTable.getColumnModel().getColumn(0));
    messageTable.removeColumn(messageTable.getColumnModel().getColumn(3));
  }

  //Function to hide extraneous information in outbox from user
  private void formatOutbox() {
    messageTable.removeColumn(messageTable.getColumnModel().getColumn(0));
    messageTable.removeColumn(messageTable.getColumnModel().getColumn(3));
  }

  private void reconnect() {
    try {
      query.connect();
    } catch (SQLException ex) {
      JOptionPane.showMessageDialog(this, "Connection attempt failed. Try again later");
      this.dispose();
    }
  }

  private final static long POLL_TIME = 30000;

  private Poller mPoller;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu accountMenu;
    private javax.swing.JMenu adminMenu;
    private javax.swing.JMenuItem adminMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JButton deleteMessageButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JList<String> mailboxSelectionList;
    private javax.swing.JTable messageTable;
    private javax.swing.JButton newMessageButton;
    private javax.swing.JButton replyMessageButton;
    private javax.swing.JMenuItem resetPwdMenuItem;
    private javax.swing.JMenuItem secQstMenuItem;
    // End of variables declaration//GEN-END:variables

  private RcvMessageGUI rcvMsgGui;
  private SndMessageGUI sndMsgGui;
  private AdminGUI adminGui;
  private QuerySubmitter query;
}
